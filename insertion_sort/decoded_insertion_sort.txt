 \\addi x3, x0, 7 #length_of_A
 \\addi x4, x0, 0 #A

00000000000100000000011000010011 //addi x12, x0, 1 //1
//loop1 
 //blt x12, x3, continue //2
 //j exit -> beq x0, x0, exit //3
//continue 
00000000110000000000011010110011 //add x13, x0, x12 //4
00000000001101101001011100010011 //slli x14, x13, 3*  (not sure if this will be needed) //5
00000000010001110000011100110011 //add x14, x14, x4 //6
00000000000001110011011110000011 //ld* x15, 0(x14) //7
//loop2
 //beq x13, x0, end_loop2 //8
11111111111101101000100000010011 //addi x16, x13, -1 # (x16 = j - 1) //9
00000000001010000001100010010011 //slli x17, x16, 3* (not sure if this will be needed) //10
00000000010010001000100010110011 //add x17, x17, x4  # add array base address //11
00000000000010001011100100000011 //ld* x18, 0(x17)  # load A[j-1] //12
 //blt x18, x15, end_loop2  # if A[j-1] <= A[j], exit loop2 //13
00000001001001110011000000100011 //sd* x18, 0(x14)  # store A[j-1] at A[j] //14
11111111111101101000011010010011 //addi x13, x13, -1  # j = j - 1 //16
00000000001101101001011100010011 //slli x14, x13, 3*  # multiply by 4 to get offset //17
00000000010001110000011100110011 //add x14, x14, x4 //18
00000000000001110011011110000011 //ld* x15, 0(x14)  # load A[j] //19
 //j loop2 -> beq x0, x0 loop2 //20
//end_loop2
00000000000101100000011000010011 //addi x12, x12, 1  # i = i + 1 //21
 //j loop1 -> beq x0, x0,loop1 //22
//exit 
//23




